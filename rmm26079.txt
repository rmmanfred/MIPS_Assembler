Grading:  rmm26079.tar
Time:     Fri May 1 22:40:35 EDT 2020
Option:   -final

>>Scores from testing<<
  1 >> Score for final/ftest01.o: 12.00 / 12.00
  2 >> Score for final/ftest02.o: 17.00 / 17.00
  3 >> Score for final/ftest03.o: 10.00 / 10.00
  4 >> Score for final/ftest04.o: 14.00 / 14.00
  5 >> Score for final/ftest05.o: 22.00 / 22.00
  6 >> Score for final/ftest06.o: 9.22 / 20.00
  7 >> Score for final/ftest07.o: 22.00 / 22.00
  8 >> Score for final/ftest08.o: 10.47 / 11.00
  9 >> Score for final/ftest09.o: 30.00 / 30.00
 10 >> Score for final/ftest10.o: 60.00 / 60.00
 11 >>  sortedsyms01.txt symbols: 3 / 3
 12 >>  sortedsyms04.txt symbols: 9 / 9
 13 >>  sortedsyms07.txt symbols: 10 / 10
============================================================

Valgrind issues:
==32118==     in use at exit: 0 bytes in 0 blocks
==32118==   total heap usage: 361 allocs, 361 frees, 21,607 bytes allocated
Invalid reads: 0
Invalid writes: 0
Uses of uninitialized values: 0
============================================================
Details from symbol table generation tests:

Sorted symbol table for ftest01.asm:
0x00000000 main
0x00002000 val01
0x00002004 val02

Comparing sortedsyms01.txt to ./symtabs/refsyms01.txt:

Checking: 0x00000000 main
  That looked OK.
Checking: 0x00002000 val01
  That looked OK.
Checking: 0x00002004 val02
  That looked OK.
 11 >>  sortedsyms01.txt symbols: 3 / 3

Sorted symbol table for ftest04.asm:
0x0000002C end
0x00000004 loop1
0x00000014 loop2
0x00000020 loop3
0x00000000 main
0x00002000 num01
0x00000008 tst1
0x00000028 tst2
0x00000024 tst3

Comparing sortedsyms04.txt to ./symtabs/refsyms04.txt:

Checking: 0x0000002C end
  That looked OK.
Checking: 0x00000004 loop1
  That looked OK.
Checking: 0x00000014 loop2
  That looked OK.
Checking: 0x00000020 loop3
  That looked OK.
Checking: 0x00000000 main
  That looked OK.
Checking: 0x00002000 num01
  That looked OK.
Checking: 0x00000008 tst1
  That looked OK.
Checking: 0x00000028 tst2
  That looked OK.
Checking: 0x00000024 tst3
  That looked OK.
 12 >>  sortedsyms04.txt symbols: 9 / 9

Sorted symbol table for ftest07.asm:
0x00000000 main
0x00002000 str01
0x00002008 str02
0x00002018 str03
0x00002020 str04
0x00002024 str05
0x00002004 val01
0x00002014 val02
0x0000201C val03
0x00002038 val04

Comparing sortedsyms07.txt to ./symtabs/refsyms07.txt:

Checking: 0x00000000 main
  That looked OK.
Checking: 0x00002000 str01
  That looked OK.
Checking: 0x00002008 str02
  That looked OK.
Checking: 0x00002018 str03
  That looked OK.
Checking: 0x00002020 str04
  That looked OK.
Checking: 0x00002024 str05
  That looked OK.
Checking: 0x00002004 val01
  That looked OK.
Checking: 0x00002014 val02
  That looked OK.
Checking: 0x0000201C val03
  That looked OK.
Checking: 0x00002038 val04
  That looked OK.
 13 >>  sortedsyms07.txt symbols: 10 / 10

============================================================
Begin running test cases...

Beginning test case 1
Running assembler on final/ftest01.asm
Running compare on fstu01.o and final/ftest01.o
Comparing fstu01.o to final/ftest01.o:

  0:          00000010001100101000000000100000
  1:          00000010111000101011000000100111
  2:          00000001000010010001100000100001
  3:          00000001011011000101000000101010
  4:          00000001110011110110100000100010
  5:          01110011010110110000100000000010
  6:          00000000000110011100001111000011
  7:          00000000000001010010010111000000
  8:          00000001111100110000000000011000
  9:          
 10:          00000000000000001111111111111111
 11:          11111111110000001110101100000111

 12 lines in reference file
 12 lines in student file
 12 correct lines in student file

  1 >> Score for final/ftest01.o: 12.00 / 12.00

Beginning test case 2
Running assembler on final/ftest02.asm
Running compare on fstu02.o and final/ftest02.o
Comparing fstu02.o to final/ftest02.o:

  0:          00010001000010010000000000000001
  1:          00100010001100001110000101110001
  2:          00010101010010110000000000000010
  3:          00000010111000101011000000100111
  4:          00001000000000000000000000000110
  5:          00000001000010010001100000100000
  6:          00011010001000000000000000000010
  7:          00000001011011000101000000101010
  8:          00001000000000000000000000001101
  9:          00011110011000000000000000000010
 10:          00000001110011110110100000100010
 11:          00001000000000000000000000001101
 12:          01110011010110110000100000000010
 13:          00000000000001010010010111000000
 14:          00000000000000000000000000001100
 15:          
 16:          00000000000000000000000000000000

 17 lines in reference file
 17 lines in student file
 17 correct lines in student file

  2 >> Score for final/ftest02.o: 17.00 / 17.00

Beginning test case 3
Running assembler on final/ftest03.asm
Running compare on fstu03.o and final/ftest03.o
Comparing fstu03.o to final/ftest03.o:

  0:          00100110001100001110110101111110
  1:          00010001000010011111111111111110
  2:          00000000000100101001110000000000
  3:          00000001000101110001000000000111
  4:          00000010100101011001100000100010
  5:          00011110110000001111111111111110
  6:          00010101010010111111111111111100
  7:          00001000000000000000000000000000
  8:          
  9:          00000000000000011000101010010010

 10 lines in reference file
 10 lines in student file
 10 correct lines in student file

  3 >> Score for final/ftest03.o: 10.00 / 10.00

Beginning test case 4
Running assembler on final/ftest04.asm
Running compare on fstu04.o and final/ftest04.o
Comparing fstu04.o to final/ftest04.o:

  0:          00001000000000000000000000000010
  1:          00100010001100000001100000010101
  2:          00010001000010011111111111111110
  3:          00011001000000000000000000000111
  4:          00001000000000000000000000001010
  5:          00101010111101101111111100111001
  6:          00000000000000000000000000000000
  7:          00001000000000000000000000001001
  8:          00111100000010000000111111111111
  9:          00011110110000001111111111111110
 10:          00010101010010111111111111111010
 11:          00001000000000000000000000000000
 12:          
 13:          00000000001011100011100110001111

 14 lines in reference file
 14 lines in student file
 14 correct lines in student file

  4 >> Score for final/ftest04.o: 14.00 / 14.00

Beginning test case 5
Running assembler on final/ftest05.asm
Running compare on fstu05.o and final/ftest05.o
Comparing fstu05.o to final/ftest05.o:

  0:          00100000000010000010000000000000
  1:          00100000000010010010000000000100
  2:          10001101000100000000000000000000
  3:          10001101001100010000000000000000
  4:          10001101001100011111111111111100
  5:          10001101000100010000000000001000
  6:          10001101001100011111111111110011
  7:          00111100000100110011100110111111
  8:          00100010011100111111111111111111
  9:          00000000000000000000000000000000
 10:          00101010011100100000000000000000
 11:          00100000000010000010000000010000
 12:          00100100000100110111000011111011
 13:          10101101000100110001000011100001
 14:          10101101000100111111111111111000
 15:          00000000000000000000000000001100
 16:          
 17:          00000000000000000000000000000000
 18:          00000000000000000000000000010111
 19:          11111111111111111111111111100001
 20:          00000000000000000000011111111111
 21:          11111111111111111110000001011100

 22 lines in reference file
 22 lines in student file
 22 correct lines in student file

  5 >> Score for final/ftest05.o: 22.00 / 22.00

Beginning test case 6
Running assembler on final/ftest06.asm
Running compare on fstu06.o and final/ftest06.o
Comparing fstu06.o to final/ftest06.o:

  0:          00100000000010000010000000000000
  1:          10001101000100000000000000000000
  2:          
  3:          01100001011000100110001100000000
  4:          01100010011000010110001101101011
  5:  0.656   00000000000000000000000000000000
                       ^^^ ^   ^^ ^^^^        
  6:  0.594   01110100011011110000000000000000
                 ^   ^       ^ ^^  ^          
  7:  0.719   01100101011011100110010000000000
                ^  ^     ^^^ ^   ^ ^^^ ^^  ^ ^
  8:  0.688   01000001011100110111001101100101
                ^ ^^     ^   ^   ^^^^^    ^^  
  9:  0.625   01101101011000100110110001101001
                    ^^     ^ ^ ^  ^^       ^  
 10:  0.625   01101110011001110010000001101101
                  ^^^^     ^   ^  ^        ^  
 11:  0.656   01100001011000110110100001101001
                  ^^^^     ^^  ^  ^       ^ ^ 
 12:  0.625   01101110011001010010000001100011
                     ^       ^ ^   ^ ^ ^    ^^
 13:  0.688   01101111011001000110010100100000
                   ^^    ^ ^^^ ^   ^ ^ ^   ^^ 
 14:  0.688   01101001011100110010000001100110
                 ^^^     ^^^ ^    ^^   ^   ^^ 
 15:  0.562   01110101011011100010110000100000
                 ^ ^           ^  ^           
 16:  0.625   01100001011011100110010000100000
                   ^^        ^    ^ ^^ ^   ^  
 17:  0.641   01100111011011110110111101100100
               ^   ^^^    ^  ^           ^ ^^ 
 18:  0.625   00100000011001100110111101110010
                         ^^^^^             ^^^
 19:  0.766   00100000011110010110111101110101
                     ^ ^^^^  ^ ^^ ^^^^ ^^^ ^ ^
 20:          00100001000000000000000000000000

 20 lines in reference file
 21 lines in student file
  5 correct lines in student file
  -1.00 for 1 extra lines that were present in student file
  -9.78 for 15 incorrect lines containing 146 explicit errors

  6 >> Score for final/ftest06.o: 9.22 / 20.00

Beginning test case 7
Running assembler on final/ftest07.asm
Running compare on fstu07.o and final/ftest07.o
Comparing fstu07.o to final/ftest07.o:

  0:          00100000000010000010000000000100
  1:          00100000000010010010000000010100
  2:          00100000000010100010000000011100
  3:          10001101000100000000000000000000
  4:          10001101001100010000000000000100
  5:          10101101011100001111111111011000
  6:          
  7:          01100001011000100110001100000000
  8:          00000000000011001100111001111101
  9:          01100010011000010110001101101011
 10:          01110111011000010111001001100100
 11:          00000000000000000000000000000000
 12:          11111111111100110011000110000011
 13:          01110100011011110000000000000000
 14:          00000000000011011100101011110011
 15:          01100101011011100110010000000000
 16:          01010000011011110110100101101110
 17:          01110100011001010111001001110011
 18:          00100000011000010111001001100101
 19:          00100000011001100111010101101110
 20:          00100001000000000000000000000000
 21:          00000000001011111110000100010110

 22 lines in reference file
 22 lines in student file
 22 correct lines in student file

  7 >> Score for final/ftest07.o: 22.00 / 22.00

Beginning test case 8
Running assembler on final/ftest08.asm
Running compare on fstu08.o and final/ftest08.o
Comparing fstu08.o to final/ftest08.o:

  0:          10001100000011110010000000000000
  1:          10001100000110000010000000000100
  2:          00100100000011110101101101111101
  3:          00000011000011110000100000101010
  4:  0.531   00010100001000000000000000000001
                                            ^^
  5:          00100100000110011000110101110111
  6:          00000000000110011100000000100001
  7:          00000000000000000000000000001100
  8:          
  9:          00000000000011001100111001111101
 10:          00000000000011011100101011110011

 11 lines in reference file
 11 lines in student file
 10 correct lines in student file
  -0.53 for 1 incorrect lines containing 2 explicit errors

  8 >> Score for final/ftest08.o: 10.47 / 11.00

Beginning test case 9
Running assembler on final/ftest09.asm
Running compare on fstu09.o and final/ftest09.o
Comparing fstu09.o to final/ftest09.o:

  0:          00100000000010000010000000000100
  1:          10001100000100010010000000000000
  2:          10001101000100100000000000001000
  3:          00100000000010010010000000011000
  4:          10001100000100110010000000010100
  5:          10101101000100010000000000011000
  6:          10101101000100100000000000011000
  7:          
  8:          00000000000000000000000000000100
  9:          11111111111111111111111111111111
 10:          11111111111111111111111111111111
 11:          11111111111111111111111111111111
 12:          11111111111111111111111111111111
 13:          00000000000000000000000000010001
 14:          00000000000000000000000000000010
 15:          00000000000000000000000000000011
 16:          00000000000000000000000000000101
 17:          00000000000000000000000000000111
 18:          00000000000000000000000000001011
 19:          00000000000000000000000000001101
 20:          00000000000000000000000000010001
 21:          00000000000000000000000000010011
 22:          00000000000000000000000000010111
 23:          00000000000000000000000000011101
 24:          00000000000000000000000000011111
 25:          00000000000000000000000000100101
 26:          00000000000000000000000000101001
 27:          00000000000000000000000000101011
 28:          00000000000000000000000000101111
 29:          00000000000000000000000000110011

 30 lines in reference file
 30 lines in student file
 30 correct lines in student file

  9 >> Score for final/ftest09.o: 30.00 / 30.00

Beginning test case 10
Running assembler on final/ftest10.asm
Running compare on fstu10.o and final/ftest10.o
Comparing fstu10.o to final/ftest10.o:

  0:          00100000000010000010000000100100
  1:          10001100000010010010000000000000
  2:          10101101001010010000000000000100
  3:          00111100000010011111111111111111
  4:          00000001010010110110000000100000
  5:          00100010000100000111100111101110
  6:          00000010001100101000100000100001
  7:          00100110010100101000011000010010
  8:          01110010100101011001100000000010
  9:          00000010011101000000000000011000
 10:          01110001111110010110000000000010
 11:          00000000000000000000000000000000
 12:          00000001110110000101100000100111
 13:          00000000000100101001011111000000
 14:          00000010010100110101100000101010
 15:          00101010010010111010110000000111
 16:          00000000000100011000010001000011
 17:          00000010000100101011100000000111
 18:          00000000000100010100000000100010
 19:          00010001001001001111111111110000
 20:          00011001011000001111111111110101
 21:          00011110111000001111111111111010
 22:          00010110101000001111111111110011
 23:          00001000000000000000000000000100
 24:          00000000000100110101100000100001
 25:          00000001000010010000100000101010
 26:          00010100001000001111111111111101
 27:          00100100000010111110111111100101
 28:          00000000000000000000000000001100
 29:          00100000000010110010000000001000
 30:          00100000000010110010000000010000
 31:          00100000000010110010000000011000
 32:          00100000000010110010000000111100
 33:          00100000000010110010000001010100
 34:          
 35:          00000000110110101001000110101111
 36:          01100001000000000000000000000000
 37:          11111111111110110001000010010110
 38:          01100001011000100000000000000000
 39:          00000000000011010101001010100100
 40:          01100001011000100110001100000000
 41:          11111111111010111000000011110111
 42:          01100001011000100110001101100100
 43:          00000000000000000000000000000000
 44:          00000000000000000000000000010111
 45:          00000000000000000000000000010111
 46:          00000000000000000000000000010111
 47:          00000000000000000000000000010111
 48:          00000000000000000000000000010111
 49:          00000000000000000000000000010111
 50:          01001000011011110111011100100000
 51:          01100100011010010110010000100000
 52:          01110100011010000110000101110100
 53:          00100000011011110110111001100101
 54:          00100000011001110110111100111111
 55:          00000000000000000000000000000000
 56:          00000000000000000000000000000110
 57:          00000000000000000000000000011100
 58:          00000000000000000000000111110000
 59:          00000000000000000001111111000000

 60 lines in reference file
 60 lines in student file
 60 correct lines in student file

 10 >> Score for final/ftest10.o: 60.00 / 60.00

============================================================
==32118== Memcheck, a memory error detector
==32118== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==32118== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info
==32118== Command: ./assemble ./final/ftest07.asm ./fstu07.o
==32118== Parent PID: 32117
==32118== 
--32118-- 
--32118-- Valgrind options:
--32118--    --leak-check=full
--32118--    --show-leak-kinds=all
--32118--    --log-file=vgrindLog.txt
--32118--    --track-origins=yes
--32118--    -v
--32118-- Contents of /proc/version:
--32118--   Linux version 3.10.0-1062.12.1.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) ) #1 SMP Tue Feb 4 23:02:59 UTC 2020
--32118-- 
--32118-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2
--32118-- Page sizes: currently 4096, max supported 4096
--32118-- Valgrind library directory: /usr/lib64/valgrind
--32118-- Reading syms from /home/rmanfred/2506/C/C03/c03Grader/assemble
--32118-- Reading syms from /usr/lib64/ld-2.17.so
--32118--   Considering /usr/lib/debug/.build-id/5c/c1a53b747a7e4d21198723c2b633e54f3c06d9.debug ..
--32118--   .. build-id is valid
--32118-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--32118--    object doesn't have a symbol table
--32118--    object doesn't have a dynamic symbol table
--32118-- Scheduler: using generic scheduler lock implementation.
--32118-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==32118== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-32118-by-rmanfred-on-new-host-4
==32118== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-32118-by-rmanfred-on-new-host-4
==32118== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-32118-by-rmanfred-on-new-host-4
==32118== 
==32118== TO CONTROL THIS PROCESS USING vgdb (which you probably
==32118== don't want to do, unless you know exactly what you're doing,
==32118== or are doing some strange experiment):
==32118==   /usr/lib64/valgrind/../../bin/vgdb --pid=32118 ...command...
==32118== 
==32118== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==32118==   /path/to/gdb ./assemble
==32118== and then give GDB the following command
==32118==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=32118
==32118== --pid is optional if only one valgrind process is running
==32118== 
--32118-- REDIR: 0x4019df0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c66c5 (???)
--32118-- REDIR: 0x4019bc0 (ld-linux-x86-64.so.2:index) redirected to 0x580c66df (???)
--32118-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--32118-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
==32118== WARNING: new redirection conflicts with existing -- ignoring it
--32118--     old: 0x04019df0 (strlen              ) R-> (0000.0) 0x580c66c5 ???
--32118--     new: 0x04019df0 (strlen              ) R-> (2007.0) 0x04c2d0e0 strlen
--32118-- REDIR: 0x4019d70 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4c2e230 (strcmp)
--32118-- REDIR: 0x401aa30 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4c31de0 (mempcpy)
--32118-- Reading syms from /usr/lib64/libc-2.17.so
--32118--   Considering /usr/lib/debug/.build-id/39/8944d32cf16a67af51067a326e6c0cc14f90ed.debug ..
--32118--   .. build-id is valid
--32118-- REDIR: 0x4ec70e0 (libc.so.6:strcasecmp) redirected to 0x4a247a0 (_vgnU_ifunc_wrapper)
--32118-- REDIR: 0x4ec3e60 (libc.so.6:strnlen) redirected to 0x4a247a0 (_vgnU_ifunc_wrapper)
--32118-- REDIR: 0x4ec93b0 (libc.so.6:strncasecmp) redirected to 0x4a247a0 (_vgnU_ifunc_wrapper)
--32118-- REDIR: 0x4ec68c0 (libc.so.6:memset) redirected to 0x4a247a0 (_vgnU_ifunc_wrapper)
--32118-- REDIR: 0x4ec6870 (libc.so.6:memcpy@GLIBC_2.2.5) redirected to 0x4a247a0 (_vgnU_ifunc_wrapper)
--32118-- REDIR: 0x4ec5850 (libc.so.6:__GI_strrchr) redirected to 0x4c2caa0 (__GI_strrchr)
--32118-- REDIR: 0x4ebca90 (libc.so.6:malloc) redirected to 0x4c29e1c (malloc)
--32118-- REDIR: 0x4edc8d0 (libc.so.6:__GI_strstr) redirected to 0x4c32070 (__strstr_sse2)
--32118-- REDIR: 0x4ec3d80 (libc.so.6:__GI_strlen) redirected to 0x4c2d040 (__GI_strlen)
--32118-- REDIR: 0x4ecd370 (libc.so.6:strchrnul) redirected to 0x4c31900 (strchrnul)
--32118-- REDIR: 0x4ec3e90 (libc.so.6:__GI_strnlen) redirected to 0x4c2cff0 (__GI_strnlen)
--32118-- REDIR: 0x4ebceb0 (libc.so.6:free) redirected to 0x4c2af16 (free)
--32118-- REDIR: 0x4ec62e0 (libc.so.6:__GI_memcmp) redirected to 0x4c30380 (__GI_memcmp)
--32118-- REDIR: 0xffffffffff600000 (???:???) redirected to 0x580c66a7 (???)
--32118-- REDIR: 0x4ebd4b0 (libc.so.6:calloc) redirected to 0x4c2bf23 (calloc)
--32118-- REDIR: 0x4ec5f50 (libc.so.6:memchr) redirected to 0x4c2e2d0 (memchr)
--32118-- REDIR: 0x4ecbaf0 (libc.so.6:__GI_memcpy) redirected to 0x4c2eee0 (__GI_memcpy)
--32118-- REDIR: 0x4ec3770 (libc.so.6:strcpy) redirected to 0x4a247a0 (_vgnU_ifunc_wrapper)
--32118-- REDIR: 0x4ed1690 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4c2d100 (strcpy)
--32118-- REDIR: 0x4ec3d30 (libc.so.6:strlen) redirected to 0x4a247a0 (_vgnU_ifunc_wrapper)
--32118-- REDIR: 0x4fa6630 (libc.so.6:__strlen_sse2_pminub) redirected to 0x4c2d020 (strlen)
--32118-- REDIR: 0x4ebcf90 (libc.so.6:realloc) redirected to 0x4c2c0f5 (realloc)
--32118-- REDIR: 0x4ec22e0 (libc.so.6:strcmp) redirected to 0x4a247a0 (_vgnU_ifunc_wrapper)
--32118-- REDIR: 0x4f75d40 (libc.so.6:__strcmp_sse42) redirected to 0x4c2e1e0 (__strcmp_sse42)
--32118-- REDIR: 0x4ecd160 (libc.so.6:__GI___rawmemchr) redirected to 0x4c31960 (__GI___rawmemchr)
--32118-- REDIR: 0x4ec2220 (libc.so.6:index) redirected to 0x4a247a0 (_vgnU_ifunc_wrapper)
--32118-- REDIR: 0x4f75c90 (libc.so.6:__strchr_sse42) redirected to 0x4c2cc90 (index)
--32118-- REDIR: 0x4ec6a90 (libc.so.6:__GI_mempcpy) redirected to 0x4c31b10 (__GI_mempcpy)
--32118-- REDIR: 0x4edce90 (libc.so.6:strstr) redirected to 0x4a247a0 (_vgnU_ifunc_wrapper)
--32118-- REDIR: 0x4f77c70 (libc.so.6:__strstr_sse42) redirected to 0x4c32100 (__strstr_sse42)
--32118-- REDIR: 0x4ecba80 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x4a247a0 (_vgnU_ifunc_wrapper)
--32118-- REDIR: 0x4f8b9f0 (libc.so.6:__memcpy_ssse3_back) redirected to 0x4c2e6e0 (memcpy@@GLIBC_2.14)
==32118== 
==32118== HEAP SUMMARY:
==32118==     in use at exit: 0 bytes in 0 blocks
==32118==   total heap usage: 361 allocs, 361 frees, 21,607 bytes allocated
==32118== 
==32118== All heap blocks were freed -- no leaks are possible
==32118== 
==32118== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==32118== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
============================================================
Results from buildLog.txt
Executing grade.sh...

Creating build subdirectory

Extracting student's files to the build directory:
ASMParser.c
BinFunc.c
c03driver.c
DataLoc.c
ParseResult.c
RegNum.c
ASMParser.h
BinFunc.h
DataLoc.h
ParseResult.h
RegNum.h
makefile
vlog.txt

Missing pledge file
Invoking:  make assembler
gcc -std=c11 -Wall -W -O0 -ggdb3 -o assemble ASMParser.c ParseResult.c BinFunc.c RegNum.c c03driver.c DataLoc.c
In file included from ParseResult.h:7:0,
                 from ASMParser.h:6,
                 from ASMParser.c:22:
BinFunc.h:49:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool r_Find(char* name, BinFunc* elem);
            ^
BinFunc.h:57:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool i_Find(char* name, BinFunc* elem);
            ^
BinFunc.h:65:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool spec_Find(char* name, BinFunc* elem);
            ^
ASMParser.c: In function ‘parseASM’:
ASMParser.c:141:2: warning: implicit declaration of function ‘pseudo_Find’ [-Wimplicit-function-declaration]
  else if(pseudo_Find(obj->Mnemonic, plem))
  ^
ASMParser.c: In function ‘parseSpecial’:
ASMParser.c:212:7: warning: unused variable ‘n’ [-Wunused-variable]
   int n = fillWord(st, temp, offset, FLAG);
       ^
ASMParser.c: In function ‘parseI’:
ASMParser.c:467:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for (int x = n; x < strlen(st); x++)
                     ^
ASMParser.c: In function ‘fillField’:
ASMParser.c:653:17: warning: initialization discards ‘const’ qualifier from pointer target type [enabled by default]
   RegNum* reg = Find(fill);
                 ^
In file included from ParseResult.h:7:0,
                 from ParseResult.c:22:
BinFunc.h:49:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool r_Find(char* name, BinFunc* elem);
            ^
BinFunc.h:57:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool i_Find(char* name, BinFunc* elem);
            ^
BinFunc.h:65:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool spec_Find(char* name, BinFunc* elem);
            ^
ParseResult.c: In function ‘processFiles’:
ParseResult.c:235:5: warning: passing argument 2 of ‘strchr’ makes integer from pointer without a cast [enabled by default]
     if (strchr(key, "blt") != NULL)
     ^
In file included from RegNum.h:26:0,
                 from ParseResult.h:5,
                 from ParseResult.c:22:
/usr/include/string.h:232:14: note: expected ‘int’ but argument is of type ‘char *’
 extern char *strchr (const char *__s, int __c)
              ^
ParseResult.c:302:6: warning: implicit declaration of function ‘parseASM’ [-Wimplicit-function-declaration]
      ParseResult* elem = parseASM(ky, next);
      ^
ParseResult.c:302:26: warning: initialization makes pointer from integer without a cast [enabled by default]
      ParseResult* elem = parseASM(ky, next);
                          ^
ParseResult.c:318:25: warning: initialization makes pointer from integer without a cast [enabled by default]
    ParseResult* extra = parseASM(next, no);
                         ^
ParseResult.c: In function ‘processSymbols’:
ParseResult.c:417:5: warning: passing argument 2 of ‘strchr’ makes integer from pointer without a cast [enabled by default]
     if (strchr(key, "blt") != NULL)
     ^
In file included from RegNum.h:26:0,
                 from ParseResult.h:5,
                 from ParseResult.c:22:
/usr/include/string.h:232:14: note: expected ‘int’ but argument is of type ‘char *’
 extern char *strchr (const char *__s, int __c)
              ^
ParseResult.c:392:6: warning: variable ‘text’ set but not used [-Wunused-but-set-variable]
  int text = 0;
      ^
ParseResult.c: In function ‘filterComment’:
ParseResult.c:473:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
  for (int i = 0; i < strlen(src); i++)
                    ^
ParseResult.c: In function ‘printData’:
ParseResult.c:547:11: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
  while (i < strlen(str))
           ^
ParseResult.c: At top level:
ParseResult.c:693:1: warning: "/*" within comment [-Wcomment]
 /**
 ^
ParseResult.c: In function ‘dataPosition’:
ParseResult.c:854:11: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
  while (i < strlen(str))
           ^
In file included from BinFunc.c:22:0:
BinFunc.h:49:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool r_Find(char* name, BinFunc* elem);
            ^
BinFunc.h:57:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool i_Find(char* name, BinFunc* elem);
            ^
BinFunc.h:65:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool spec_Find(char* name, BinFunc* elem);
            ^
BinFunc.c:63:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool r_Find(char* name, BinFunc* elem)
            ^
BinFunc.c: In function ‘r_Find’:
BinFunc.c:65:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
  for (int i = 0; i < (sizeof(r)/sizeof(BinFunc)); i++)
                    ^
BinFunc.c: At top level:
BinFunc.c:82:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool i_Find(char* name, BinFunc* elem)
            ^
BinFunc.c: In function ‘i_Find’:
BinFunc.c:84:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
  for (int n = 0; n < (sizeof(i)/sizeof(BinFunc)); n++)
                    ^
BinFunc.c: At top level:
BinFunc.c:102:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool spec_Find(char* name, BinFunc* elem)
            ^
BinFunc.c: In function ‘spec_Find’:
BinFunc.c:104:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
  for (int i = 0; i < (sizeof(spec)/sizeof(BinFunc)); i++)
                    ^
BinFunc.c: At top level:
BinFunc.c:121:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool pseudo_Find(char* name, BinFunc* elem)
            ^
BinFunc.c: In function ‘pseudo_Find’:
BinFunc.c:123:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
  for (int i = 0; i < (sizeof(pseudo)/sizeof(BinFunc)); i++)
                    ^
RegNum.c: In function ‘Find’:
RegNum.c:46:20: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
  for (int i = 0; i < (sizeof(reg)/sizeof(RegNum)); i++)
                    ^
RegNum.c:53:2: warning: initialization makes integer from pointer without a cast [enabled by default]
  RegNum null = {NULL, NULL, NULL};
  ^
RegNum.c:53:2: warning: (near initialization for ‘null.reg’) [enabled by default]
RegNum.c:54:2: warning: function returns address of local variable [-Wreturn-local-addr]
  return &null;
  ^
In file included from ParseResult.h:7:0,
                 from c03driver.c:22:
BinFunc.h:49:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool r_Find(char* name, BinFunc* elem);
            ^
BinFunc.h:57:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool i_Find(char* name, BinFunc* elem);
            ^
BinFunc.h:65:12: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 const bool spec_Find(char* name, BinFunc* elem);
            ^

============================================================

